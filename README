Original author: Aditya Dani
Original repository: github.com/adityadani/DR-SensorTag

Modified by: Gordon Sewart
email: gordon@marqmetrix.com

===================
Project Description
===================

Goal: to create a utility that logs sensor measurements from the SensorTag instrument. 

This utility provides logging support for the following sensors:
1] Temperature (IR)
2] Accelerometer
3] Gyroscope
4] Magnetometer
5] Humidity
6] Barometer

All these measurements (and their timestamps) are stored in their respective csv files.

======
Design
======

This logging functionality consists of three main parts:

[A] Binary Utility Functions

    These are the binaries which get generated when you run the "make_script.sh".
    One binary utility gets created for each of the above SensorTag measurements.
    The primary function of these binaries is to convert the hex data returned by
    the sensorTag into actual readings/measurements.

[B] Scripts to read and process Data from the SensorTag
    
    There are a group of scripts which are used to get and process data from sensorTag.
    In order to recieve a particular sensor reading, we need to write a specific value into
    each memory addresse for the sensorTag.
    
    Also, we use the notification mode of the SensorTag wherein all the sensor readings are sent
    to the bluetooth connected computer periodically. Currently, the three primary sensor 
    measurements and their sampling rates are as follows:

    1] Temperature - 10 samples/sec
    2] Accelerometer - 10 samples/sec
    3] Gyroscope - 1 sample/sec
    
    Following are the memory locations for each sensor:
    
    Temperature (IR)
    -----------
    To start sensing:  Write 01 at 0x29
    To enable notification mode:  Write 01:00 at 0x26

    Accelerometer
    -----------
    To start sensing:  Write 01 at 0x31
    To enable notification mode:  Write 01:00 at 0x2E
    To increase sampling rate to 10 samples/sec:  Write 10 at 0x34 (default is 1Hz)

    Gyroscope
    -----------
    To start sensing:  Write 01 at 0x5B
    To enable notification mode:  Write 01:00 at 0x58

    ***To test/confirm with SensorTag 2:
    (Handles found at processors.wiki.ti.com/images/a/a8/BLE_SensorTag_GATT_Server.pdf and 
    www.ti.com/ww/en/wireless_connectivity/sensortag2015/tearDown.html)

    Magnetometer
    -----------
    To start sensing:  Write 01 to 0x4A
    To enable notification mode:  Write 01:00 to 0x47

    Humidity
    -----------
    To start sensing: Write 01 at 0x2C
    To enable notification mode: Write 01:00 at 0x2A
    To change sampling rate:  Write [x] at 0x42 where Period = 10*x  ms; lower limit 100 ms; default 1000 ms

    Barometer
    -----------
    To start sensing: Write 01 at 0x34
    To enable notification mode: Write 01:00 to 0x32


    Script summaries:

    1] sensorTag.sh
    ---------------
    This is the starter script which takes the MAC address of the SensorTag as input. It initiates 
    run_gatttool.sh and appends timestamp to each sensor reading received from the SensorTag. You 
    redirect its output to a file of your choice.

    2] run_gatttool.sh
    ------------------
    This script is called from the sensorTag.sh script. It connects the computer to the SensorTag device 
    via bluetooth. It also writes appropriate values in SensorTag memory addresses using gatttool to enable the
    sensors and start the notification of the sensor readings.

    3] aggregate_data.sh
    --------------------
    After runnning sensorTag.sh, you will get a file containing the output returned
    by the gatttool appended with timestamps. Give this file as an input to aggregate_data.sh. This
    script basically aggregates the data and removes the unecessary texts from the file before 
    writing the hex Data measurements received from the semsorTag into a file. This intermediate 
    file is then processed and each hex Data reading is given to the appropriate binary utility functions
    described above. The binary utility functions then output the obtained measurements into
    separate csv files.

[C] Audio processing
    The third part to this project is to record an audio along with the sensorTag readings that
    have been taken and then process that audio. The audio recording device records the audio
    and stores it into .wav file. We use the linux commandline tool "sox" which can take an .wav file
    as input and output a data file consisting of amplitudes time sorted. You can also specify the 
    sampling rate too. Example format:
    
    $ sox -r <sampling rate> <*.wav file> <*.dat file>

    The output file name extension should be "*.dat" in order for sox to recognize what kind of operation
    needs to be done on the input file.

    The sox command has been included in the aggregate data script. And thus that script additionally
    takes two extra inputs (vizz Input Audio File and the sampling rate).


===========
Compilation
===========

To compile all the C programs and generate the binary utility functions.
$ ./make_script.sh

============
Requirements
============

1] Linux computer with support for Bluetooth Low Energy (BLE); a.k.a. Bluetooth 4.0 or Bluetooth Smart

2] Kernel Version 3.9.11 or higher

3] Dependencies (still need to confirm): BlueZ 5.4+, sox, expect, and gawk

   Note that this directory/repository also contains an empty directory named "empty".
   It is required by the bash and expect scripts. Ensure that your working directory has this 
   directory.

======================================================
Execution and generating sensor measurement .csv files
======================================================

1] To obtain the MAC address of the SensorTag, run the following command
and press the button on the side of the SensorTag:

    $ sudo hcitool lescan

Ensure that bluetooth is enabled.

2] To obtain the hexData from the SensorTag for each sensors, run the following 
   command:

   $ ./sensorTag.sh <MAC Address> > <Hex-Dump Filename>

Use the MAC address obtained from step 1. Use any desired filename with any extension
as the <Hex-Dump Filename> parameter. To overwrite, use >. To append, use >>.

3] To aggregate and obtain the final sensor measurements/readings, run the following command:

   $ ./aggregate_data.sh <MAC address> <Hex-Dump Filename> <Audio Filename> <Sampling Rate>

Use the MAC address obtained from step 1 and the same filename for <Hex-Dump Filename> 
as used in step 2. The third parameter is the input audio file (a .wav file) obtained 
from the audio recorder. The fourth parameter is the sampling rate at which the
audio file should be sampled. As all the other measurements are done at 10Hz, it is 
advisable to input 10 for the 4th parameter.

The final measurements and the output files generated are:

Temperature Measurements --> temp_MAC-Address
Accelerometer Measurements --> accel_MAC-Address
Gyroscope Measurements --> gyro_MAC-Address
Audio Measurements --> audio_MAC-Address.dat

    note to self: How to output other measurements? Also, how to measure some and not others?

==================
Output File Format
==================

The general format is:

[Timestamp1, Reading1-PartA, Reading1-PartB, Reading1-PartC]
[Timestamp2, Reading2-PartA, Reading2-PartB, Reading2-PartC]
[Timestamp3, Reading3-PartA, Reading3-PartB, Reading3-PartC]

  
